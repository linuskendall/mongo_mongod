---

# This role deploys the mongod processes and sets up the replication set.

- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_distribution != "Fedora"

- name: Add the OS specific varibles
  include_vars: "Fedora.yml"
  when: ansible_distribution == "Fedora"

- include: preconfig.yml
- include: install.yml
- include: tune.yml

- name: Copy the keyfile for authentication
  copy: src=secret dest={{ mongod_datadir_prefix }}/secret owner={{ mongo_user }} group={{ mongo_group }} mode=0400
  notify: restart mongodb

- name: Reload systemctl daemons
  command: systemctl daemon-reload
  when: ansible_distribution == "Fedora"

- name: Create tmpfiles.d file
  copy: content="d /var/run/mongodb 0755 mongodb mongodb" dest="/lib/tmpfiles.d/mongodb.conf"
  when: ansible_distribution == "Fedora"

- name: Run tmpfiled.d
  command: systemd-tmpfiles --create mongodb.conf
  when: ansible_distribution == "Fedora"

- name: Create mongodb log dir
  file: path="/var/log/mongodb" mode=0750 state=directory owner={{ mongo_user }} group={{ mongo_group }}
  notify: restart mongodb
  when: ansible_distribution == "Fedora"

- name: Start the mongodb service for redhat variants
  command: creates=/var/lock/subsys/mongod-{{ mongod_port }} /etc/init.d/mongod-{{ mongod_port }} start
  when: ansible_os_family == "RedHat" and ansible_distribution != "Fedora"

- name: Start the mongodb service for Ubuntu variants
  service: name=mongodb-{{ mongod_port }} state=started
  when: ansible_os_family == "Debian" 

- name: Start the mongodb service for Fedora
  service: name=mongod state=started enabled=true
  when: ansible_distribution == "Fedora"

- name: Check if local exception is active
  command: /usr/bin/mongo --port "{{ mongod_port }}" -u "{{mongod_admin_user}}" -p "{{mongod_admin_pwd}}" --authenticationDatabase admin --eval "quit();"
  register: mongodb_has_admin_user
  ignore_errors: true
  tags:
    - mongo_users

- name: Create the file to initialize the mongod replica set
  template: src=repset_init.j2 dest=/tmp/repset_init.js
  when: mongod_replication and mongod_repl_master == ansible_hostname #and mongodb_has_admin_user|failed

- name: Initialize the replication set
  command: /usr/bin/mongo --port "{{ mongod_port }}" /tmp/repset_init.js 
  when: mongod_replication and mongod_repl_master == ansible_hostname and mongodb_has_admin_user|failed

- name: Initialize the replication set
  command: /usr/bin/mongo -u "{{mongod_admin_user}}" -p "{{mongod_admin_pwd}}" --authenticationDatabase admin --port "{{ mongod_port }}" /tmp/repset_init.js 
  when: mongod_replication and mongod_repl_master == ansible_hostname and not mongodb_has_admin_user|failed

- name: Create admin user
  mongodb_user: database="admin" name="{{mongod_admin_user}}" password="{{mongod_admin_pwd}}" roles="userAdminAnyDatabase,dbAdminAnyDatabase,clusterAdmin,readWriteAnyDatabase"  login_port="{{ mongod_port }}" state=present
  when: mongodb_has_admin_user|failed and mongod_repl_master == ansible_hostname and mongod_replication
  tags:
    - mongo_users

- name: Create admin user
  mongodb_user: database="admin" name="{{mongod_admin_user}}" password="{{mongod_admin_pwd}}" roles="userAdminAnyDatabase,dbAdminAnyDatabase,clusterAdmin,readWriteAnyDatabase"  login_port="{{ mongod_port }}" state=present
  when: mongodb_has_admin_user|failed and not mongod_replication
  tags:
    - mongo_users

- name: Create other users
  mongodb_user: database="{{item.db}}" name="{{item.name}}" password="{{item.pwd}}" roles="{{item.roles}}" login_port="{{ mongod_port }}" login_user="{{ mongod_admin_user }}"  login_password="{{mongod_admin_pwd}}" replica_set="{{mongod_replset_name}}" state=present
  when: mongod_replication and mongod_repl_master == ansible_hostname 
  with_items: mongod_users
  tags:
    - mongo_users
  ignore_errors: True # temporary ignore errors

- name: Create other users
  mongodb_user: database="{{item.db}}" name="{{item.name}}" password="{{item.pwd}}" roles="{{item.roles}}" login_port="{{ mongod_port }}" login_user="{{ mongod_admin_user }}"  login_password="{{mongod_admin_pwd}}" state=present
  when: not mongod_replication 
  with_items: mongod_users
  tags:
    - mongo_users
  ignore_errors: True # temporary ignore errors

- name: Add admin user to all database
  mongodb_user: database="{{ item.db }}" name="admin" password="{{ mongod_admin_pwd }}" roles="userAdmin,readWrite"  login_port="{{ mongod_port }}" login_user="{{ item.name }}"  login_password="{{ item.pwd }}" replica_set="{{mongod_replset_name}}" state=present
  when: mongod_replication and mongod_repl_master == ansible_hostname 
  with_items: mongod_users
  tags:
    - mongo_add_admin_priv
    - mongo_users
  ignore_errors: True

- name: Add admin user to all database
  mongodb_user: database="{{item.db}}" name="admin" password="{{mongod_admin_pwd}}" roles="userAdmin,readWrite" login_port="{{ mongod_port }}" login_user="{{ item.name }}" login_password="{{ item.pwd }}" state=present
  when: not mongod_replication 
  with_items: mongod_users
  tags:
    - mongo_users
    - mongo_add_admin_priv
  ignore_errors: True
